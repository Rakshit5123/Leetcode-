class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return buildBST(nums, 0, nums.size() - 1);
    }
    
private:
    TreeNode* buildBST(vector<int>& nums, int left, int right) {
        if (left > right) return nullptr; // base case
        
        int mid = left + (right - left) / 2; // find middle index
        TreeNode* root = new TreeNode(nums[mid]); // make middle element root
        
        root->left = buildBST(nums, left, mid - 1);   // construct left subtree
        root->right = buildBST(nums, mid + 1, right); // construct right subtree
        
        return root;
    }
};
